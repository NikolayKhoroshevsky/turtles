/*
 * Copyright 2014–2017 SlamData Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package turtles

/** A type that can be “wrapped” and “unwrapped” one step at a time.
  */
trait Steppable[T] extends Based[T] {
  def embed(ft: Base[T]): T
  def project(t: T): Base[T]
}

object Steppable {
  /** Create a [[Steppable]] instance from the mappings to/from the
    * fixed-point.
    */
  def fromAlgebraIso[T, F[_]](φ: Algebra[F, T], ψ: Coalgebra[F, T])
      : Steppable.Aux[T, F] =
    new Steppable[T] {
      type Base[A] = F[A]
      def project(t: T) = ψ(t)
      def embed(ft: F[T]) = φ(ft)
    }

  def iso[T, F[_]](implicit T: Steppable.Aux[T, F]) =
    AlgebraIso[F, T](T.embed(_))(T.project(_))

  // NB: The rest of this is what would be generated by simulacrum, except this
  //     type class is too complicated to take advantage of that.

  type Aux[T, F[_]] = Steppable[T] { type Base[A] = F[A] }

  def apply[T](implicit instance: Steppable[T]): Aux[T, instance.Base] =
    instance

  trait Ops[T, F[_]] {
    def typeClassInstance: Aux[T, F]
    def self: T

    def project: F[T] = typeClassInstance.project(self)
  }

  trait ToSteppableOps {
    implicit def toSteppableOps[T, F[_]](target: T)(implicit tc: Aux[T, F]): Ops[T, F] =
      new Ops[T, F] {
        val self = target
        val typeClassInstance = tc
      }
  }

  object nonInheritedOps extends ToSteppableOps

  trait AllOps[T, F[_]] extends Ops[T, F] {
    def typeClassInstance: Aux[T, F]
  }

  object ops {
    implicit def toAllSteppableOps[T, F[_]](target: T)(implicit tc: Aux[T, F]): AllOps[T, F] =
      new AllOps[T, F] {
        val self = target
        val typeClassInstance = tc
      }
  }
}
